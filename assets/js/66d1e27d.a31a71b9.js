"use strict";(self.webpackChunk_0yukali0=self.webpackChunk_0yukali0||[]).push([[6297],{3905:(n,e,t)=>{t.d(e,{Zo:()=>u,kt:()=>g});var r=t(7294);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function i(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function l(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?i(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function o(n,e){if(null==n)return{};var t,r,a=function(n,e){if(null==n)return{};var t,r,a={},i=Object.keys(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var s=r.createContext({}),m=function(n){var e=r.useContext(s),t=e;return n&&(t="function"==typeof n?n(e):l(l({},e),n)),t},u=function(n){var e=m(n.components);return r.createElement(s.Provider,{value:e},n.children)},p="mdxType",c={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},f=r.forwardRef((function(n,e){var t=n.components,a=n.mdxType,i=n.originalType,s=n.parentName,u=o(n,["components","mdxType","originalType","parentName"]),p=m(t),f=a,g=p["".concat(s,".").concat(f)]||p[f]||c[f]||i;return t?r.createElement(g,l(l({ref:e},u),{},{components:t})):r.createElement(g,l({ref:e},u))}));function g(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var i=t.length,l=new Array(i);l[0]=f;var o={};for(var s in e)hasOwnProperty.call(e,s)&&(o[s]=e[s]);o.originalType=n,o[p]="string"==typeof n?n:a,l[1]=o;for(var m=2;m<i;m++)l[m]=t[m];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},9501:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>m});var r=t(7462),a=(t(7294),t(3905));const i={id:"golangBase",title:"Golang\u57fa\u672c"},l="Golang\u57fa\u672c\u7bc4\u4f8b",o={unversionedId:"programming/golang/golangBase",id:"programming/golang/golangBase",title:"Golang\u57fa\u672c",description:"\u7c21\u55ae\u8aaa\u660eGolang\u57fa\u790e\u7bc4\u4f8b\u7684\u529f\u80fd\u3002",source:"@site/docs/programming/golang/golangBase.md",sourceDirName:"programming/golang",slug:"/programming/golang/golangBase",permalink:"/docs/programming/golang/golangBase",draft:!1,editUrl:"https://github.com/0yukali0/0yukali0.github.io/docs/programming/golang/golangBase.md",tags:[],version:"current",frontMatter:{id:"golangBase",title:"Golang\u57fa\u672c"},sidebar:"tutorialSidebar",previous:{title:"Go E2E \u5feb\u901f\u5165\u9580",permalink:"/docs/programming/golang/e2e/goalng_e2e_intro"},next:{title:"Golang\u4e4b\u82f1\u96c4\u8def",permalink:"/docs/programming/golang/golangHero"}},s={},m=[{value:"\u57fa\u672c",id:"\u57fa\u672c",level:2},{value:"\u8b8a\u6578\u3001\u5e38\u6578\u8207\u6307\u6a19",id:"\u8b8a\u6578\u5e38\u6578\u8207\u6307\u6a19",level:3},{value:"For\u8ff4\u5708",id:"for\u8ff4\u5708",level:3},{value:"If\u8207Swith",id:"if\u8207swith",level:3},{value:"Arrays\u8207Slices",id:"arrays\u8207slices",level:3},{value:"Maps",id:"maps",level:3},{value:"\u51fd\u6578\u8207\u8b8a\u6578",id:"\u51fd\u6578\u8207\u8b8a\u6578",level:3},{value:"\u51fd\u6578\u53c3\u6578:\u4f38\u7e2e\u8b8a\u6578",id:"\u51fd\u6578\u53c3\u6578\u4f38\u7e2e\u8b8a\u6578",level:3},{value:"\u533f\u540d\u51fd\u6578\u7684\u5c01\u9589\u6027(Closure of Anonymous function)",id:"\u533f\u540d\u51fd\u6578\u7684\u5c01\u9589\u6027closure-of-anonymous-function",level:3},{value:"\u7d50\u69cb\u3001\u51fd\u6578\u8207\u4ecb\u9762",id:"\u7d50\u69cb\u51fd\u6578\u8207\u4ecb\u9762",level:3},{value:"Goroutines",id:"goroutines",level:3},{value:"Json",id:"json",level:3},{value:"XML",id:"xml",level:3}],u={toc:m},p="wrapper";function c(n){let{components:e,...t}=n;return(0,a.kt)(p,(0,r.Z)({},u,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"golang\u57fa\u672c\u7bc4\u4f8b"},"Golang\u57fa\u672c\u7bc4\u4f8b"),(0,a.kt)("p",null,"\u7c21\u55ae\u8aaa\u660e",(0,a.kt)("a",{parentName:"p",href:"https://gobyexample.com/"},"Golang\u57fa\u790e\u7bc4\u4f8b"),"\u7684\u529f\u80fd\u3002"),(0,a.kt)("h2",{id:"\u57fa\u672c"},"\u57fa\u672c"),(0,a.kt)("h3",{id:"\u8b8a\u6578\u5e38\u6578\u8207\u6307\u6a19"},"\u8b8a\u6578\u3001\u5e38\u6578\u8207\u6307\u6a19"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'// \u5e38\u6578\u5ba3\u544a\nconst s string = "constant"\n\nfunc zeroptr(iptr *int) {\n    *iptr = 0\n}\n\nfunc main() {\n    // \u5ba3\u544a\u8b8a\u6578\u3001\u81ea\u9069\u61c9\u578b\u614b\n    // \u7b49\u540c\u65bca := "initial"\n    var a = "initial"\n    fmt.Println(a)\n    // \u591a\u8b8a\u6578\u5ba3\u544a\u3001\u5b9a\u7fa9\u9069\u61c9\u578b\u614b\n    var b, c int = 1, 2\n    fmt.Println(b, c)\n    // \u4e8b\u5148\u5ba3\u544a\uff0c\u5b9a\u7fa9\u578b\u614b\n    var d int\n    fmt.Println(d)\n    // \u6307\u6a19\n    i := 1\n    zeroptr(&i)\n    fmt.Println("zeroptr", i)\n}\n')),(0,a.kt)("h3",{id:"for\u8ff4\u5708"},"For\u8ff4\u5708"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'func main() {\n    // \u4f7f\u7528 i++ \u9054\u5230\n    for i := 0; i < 3; i++ { fmt.Println(i) }\n    // \u4f7f\u7528 range\uff0c \u4f9d\u5e8f\u62dc\u8a2a[1, 2, 3]\n    for i := range 3 { fmt.Println("range", i) }\n    // \u7121\u9650\u8ff4\u5708\n    for { fmt.Println("loop") }\n}\n')),(0,a.kt)("h3",{id:"if\u8207swith"},"If\u8207Swith"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'// if, else if, else if, ...., else\nif num := 9; num < 0 {\n    fmt.Println(num, "is negative")\n} else if num < 10 {\n    fmt.Println(num, "has 1 digit")\n} else {\n    fmt.Println(num, "has multiple digits")\n}\n\n// \u4e00\u500bCase\u53ef\u4ee5\u653e\u5165\u591a\u7a2e\u689d\u4ef6\nswitch time.Now().Weekday() {\n    case time.Saturday, time.Sunday:\n        fmt.Println("It\'s the weekend")\n    default:\n        fmt.Println("It\'s a weekday")\n }\n\n// \u975e\u5e38\u6709\u7528!!!\n// \u4f9d\u64da\u50b3\u5165\u7269\u4ef6\u578b\u614b\u66f4\u6539\u8655\u7406\u65b9\u5f0f\uff0c\u5728golang\u958b\u6e90\u5c08\u6848\u5e38\u770b\u898b\nwhatAmI := func(i interface{}) {\n        switch t := i.(type) {\n        case bool:\n            fmt.Println("I\'m a bool")\n        case int:\n            fmt.Println("I\'m an int")\n        default:\n            fmt.Printf("Don\'t know type %T\\n", t)\n        }\n    }\n')),(0,a.kt)("h3",{id:"arrays\u8207slices"},"Arrays\u8207Slices"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'// Array\u57fa\u672c\u7528\u6cd5\nnums := [5]int{1,2,3,4,5}\nfor idx, val := range nums { fmt.Println(val) }\n\n// \u7528\u6cd5\u8207Array\u57fa\u672c\u76f8\u540c\uff0c\u4f46\u53ef\u4ee5\u900f\u904eIndex\u5207\u5272\nchars := []string("H", "e", "l", "l", "o", "World")\nhello := chars[:len(chars)-1]\n')),(0,a.kt)("h3",{id:"maps"},"Maps"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'// \u5275\u5efa\nm := map[string]int{"k1": 1, "k2": 2}\n// \u9664\u53bb\u7279\u5b9akey\ndelete(m, "k1")\nm["k3"] = 3\n// \u4f9d\u64da\u7279\u5b9akey\u7684\u6709\u7121\uff0c\u505a\u51fa\u4e0d\u540c\u53cd\u61c9\nif ok, val := m["k2"]; ok {\n    fmt.Println("find!", val)\n} else {\n    fmt.Println("No key:", "k2")\n}\n// \u4f9d\u5e8f\u62dc\u8a2a\u5b58\u5728\u7684key, value\n// \u53ea\u62dc\u8a2akey\uff0c\u8acb\u4f7f\u7528 for key := range m\nfor key, val := range m {\n    fmt.Println(key, val)\n}\n// \u6e05\u7a7a\nclear(m)\n')),(0,a.kt)("h3",{id:"\u51fd\u6578\u8207\u8b8a\u6578"},"\u51fd\u6578\u8207\u8b8a\u6578"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'func plus(a, b int) int {\n    return a + b\n}\n\nfunc main() {\n    fmt.Println(plus(1, 1))\n    powerPlus := func(i, j interface{}) (bool, interface{}) {\n        if reflect.TypeOf(i) != reflect.TypeOf(j) {\n            return false, nil\n        }\n        switch i.(type) {\n        case bool:\n            return true, i.(bool) && j.(bool)\n        case int:\n            return true, i.(int) + j.(int)\n        case string:\n            return true, i.(string) + j.(string)\n        default:\n            return false, nil\n        }\n    }\n    fmt.Println(powerPlus(1,1))\n    fmt.Println(powerPlus("Hello","World"))\n    fmt.Println(powerPlus("Hello", 1))\n    fmt.Println(powerPlus(1.1, 1.2))\n}\n')),(0,a.kt)("h3",{id:"\u51fd\u6578\u53c3\u6578\u4f38\u7e2e\u8b8a\u6578"},"\u51fd\u6578\u53c3\u6578:\u4f38\u7e2e\u8b8a\u6578"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'func sum(nums ...int) {\n    fmt.Print(nums, " ")\n    total := 0\n\n    for _, num := range nums {\n        total += num\n    }\n    fmt.Println(total)\n}\n\nfunc main() {\n    sum(1, 2)\n    sum(1, 2, 3)\n\n    nums := []int{1, 2, 3, 4}\n    sum(nums...)\n}\n')),(0,a.kt)("h3",{id:"\u533f\u540d\u51fd\u6578\u7684\u5c01\u9589\u6027closure-of-anonymous-function"},"\u533f\u540d\u51fd\u6578\u7684\u5c01\u9589\u6027(Closure of Anonymous function)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"func intSeq() func() int {\n    i := 0\n    return func() int {\n        i++\n        return i\n    }\n}\n// nextInt\u8207newInts\u7684i\u5404\u81ea\u7368\u7acb\u8a08\u7b97\nnextInt := intSeq() \nnewInts := intSeq()\n")),(0,a.kt)("h3",{id:"\u7d50\u69cb\u51fd\u6578\u8207\u4ecb\u9762"},"\u7d50\u69cb\u3001\u51fd\u6578\u8207\u4ecb\u9762"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"type geometry interface {\n    area() float64\n    perim() float64\n}\n\nfunc measure(g geometry) {\n    fmt.Println(g)\n    fmt.Println(g.area())\n    fmt.Println(g.perim())\n}\n\nfunc (r rect) area() float64 {\n    return r.width * r.height\n}\nfunc (r rect) perim() float64 {\n    return 2*r.width + 2*r.height\n}\n\nfunc (c *circle) area() float64 {\n    return math.Pi * c.radius * c.radius\n}\nfunc (c *circle) perim() float64 {\n    return 2 * math.Pi * c.radius\n}\n")),(0,a.kt)("h3",{id:"goroutines"},"Goroutines"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"")),(0,a.kt)("h3",{id:"json"},"Json"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'import (\n    "encoding/json"\n    "fmt"\n    "os"\n)\n\ntype response1 struct {\n    Page   int\n    Fruits []string\n}\n\ntype response2 struct {\n    Page   int      `json:"page"`\n    Fruits []string `json:"fruits"`\n}\n\nfunc main() {\n    // \u7522\u751f{"Page":1,"Fruits":["apple","peach","pear"]}\n    res1D := &response1{\n        Page:   1,\n        Fruits: []string{"apple", "peach", "pear"}}\n    res1B, _ := json.Marshal(res1D)\n    fmt.Println(string(res1B))\n    \n    // \u66f4\u6539json\u7684Key\uff0c\u4e0d\u4f7f\u7528struct\u8b8a\u6578\u540d\u7a31\n    // \u7522\u751f{"page":1,"fruits":["apple","peach","pear"]}\n    res2D := &response2{\n        Page:   1,\n        Fruits: []string{"apple", "peach", "pear"}}\n    res2B, _ := json.Marshal(res2D)\n    fmt.Println(string(res2B))\n\n    // \u900f\u904einterface\u63a5\u6536json\uff0c\u4e26\u85c9\u7531Typeof\u9032\u884c\u8f49\u578b\u8655\u88e1\n    byt := []byte(`{"num":6.13,"strs":["a","b"]}`)\n    var dat map[string]interface{}\n\n    if err := json.Unmarshal(byt, &dat); err != nil {\n        panic(err)\n    }\n    fmt.Println(dat)\n\n    num := dat["num"].(float64)\n    fmt.Println(num)\n\n    strs := dat["strs"].([]interface{})\n    str1 := strs[0].(string)\n    fmt.Println(str1)\n\n    // \u5f9estring\u900f\u904eUnmarshal\u8f49\u5b57\u4e32\u70baresponse\n    str := `{"page": 1, "fruits": ["apple", "peach"]}`\n    res := response2{}\n    json.Unmarshal([]byte(str), &res)\n    fmt.Println(res)\n    fmt.Println(res.Fruits[0])\n\n    enc := json.NewEncoder(os.Stdout)\n    d := map[string]int{"apple": 5, "lettuce": 7}\n    enc.Encode(d)\n}\n')),(0,a.kt)("h3",{id:"xml"},"XML"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'import (\n    "encoding/xml"\n    "fmt"\n)\n\ntype Plant struct {\n    XMLName xml.Name `xml:"plant"`\n    Id      int      `xml:"id,attr"`\n    Name    string   `xml:"name"`\n    Origin  []string `xml:"origin"`\n}\n\nfunc (p Plant) String() string {\n    return fmt.Sprintf("Plant id=%v, name=%v, origin=%v", p.Id, p.Name, p.Origin)\n}\n\nfunc main() {\n    // \u5c01\u88dd\n    coffee := &Plant{Id: 27, Name: "Coffee", Origin: []string{"Ethiopia", "Brazil"}}\n    out, _ := xml.MarshalIndent(coffee, " ", "  ")\n    fmt.Println(string(out))\n    fmt.Println(xml.Header + string(out))\n\n    // \u5c07coffee\u89e3\u69cb\n    var p Plant\n    if err := xml.Unmarshal(out, &p); err != nil {\n        panic(err)\n    }\n    fmt.Println(p)\n\n    tomato := &Plant{Id: 81, Name: "Tomato", Origin: []string{"Mexico", "California"}}\n    type Nesting struct {\n        XMLName xml.Name `xml:"nesting"`\n        Plants  []*Plant `xml:"parent>child>plant"`\n    }\n\n    nesting := &Nesting{}\n    nesting.Plants = []*Plant{coffee, tomato}\n\n    out, _ = xml.MarshalIndent(nesting, " ", "  ")\n    fmt.Println(string(out))\n}\n')))}c.isMDXComponent=!0}}]);