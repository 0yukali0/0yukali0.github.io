"use strict";(self.webpackChunk_0yukali0=self.webpackChunk_0yukali0||[]).push([[631],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),d=a,g=u["".concat(s,".").concat(d)]||u[d]||f[d]||o;return n?r.createElement(g,i(i({ref:t},p),{},{components:n})):r.createElement(g,i({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3235:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>f,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={},i=void 0,l={unversionedId:"pytorch/kaggle/lightning/mnist",id:"pytorch/kaggle/lightning/mnist",title:"mnist",description:"---",source:"@site/docs/pytorch/kaggle/lightning/mnist.md",sourceDirName:"pytorch/kaggle/lightning",slug:"/pytorch/kaggle/lightning/mnist",permalink:"/docs/pytorch/kaggle/lightning/mnist",draft:!1,editUrl:"https://github.com/0yukali0/0yukali0.github.io/docs/pytorch/kaggle/lightning/mnist.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"mnist",permalink:"/docs/pytorch/kaggle/basic/mnist"},next:{title:"\u4ecb\u7d39",permalink:"/docs/ray/train/"}},s={},c=[{value:"title: MNIST\u8863\u7269\u8cc7\u6599\u96c6\u5224\u65b7",id:"title-mnist\u8863\u7269\u8cc7\u6599\u96c6\u5224\u65b7",level:2},{value:"Pytorch\u7a0b\u5f0f",id:"pytorch\u7a0b\u5f0f",level:2}],p={toc:c},u="wrapper";function f(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("hr",null),(0,a.kt)("p",null,"id: mnist_lightning"),(0,a.kt)("h2",{id:"title-mnist\u8863\u7269\u8cc7\u6599\u96c6\u5224\u65b7"},"title: MNIST\u8863\u7269\u8cc7\u6599\u96c6\u5224\u65b7"),(0,a.kt)("h1",{id:"mnist"},"MNIST"),(0,a.kt)("h2",{id:"pytorch\u7a0b\u5f0f"},"Pytorch\u7a0b\u5f0f"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import torch\nfrom torch.utils.data import DataLoader\nfrom torchvision import datasets\nfrom torchvision.transforms import ToTensor\nfrom sklearn.metrics import accuracy_score\n\nimport lightning as pl\n\nclass PytorchLightningModel(pl.LightningModule):\n    def __init__(self):\n        super().__init__()\n        self.flatten = nn.Flatten()\n        self.linear_relu_stack = nn.Sequential(\n            nn.Linear(28*28, 512),\n            nn.ReLU(),\n            nn.Linear(512, 512),\n            nn.ReLU(),\n            nn.Linear(512, 10)\n        )\n        self.batch_size = 64\n    def prepare_data(self):\n        self.train_set = datasets.FashionMNIST(\n            root=\"data\",\n            train=True,\n            download=True,\n            transform=ToTensor(),\n        )\n        self.val_set = datasets.FashionMNIST(\n            root=\"data\",\n            train=False,\n            download=True,\n            transform=ToTensor(),\n        )\n    def configure_optimizer(self):\n        return torch.optim.SGD(self.parameters(), lr=1e-3)\n    def train_dataloader(self):\n        return DataLoader(self.train_set, batch_size=self.batch_size, shuffle=True)\n    def val_dataloader(self):\n        return DataLoader(self.val_set, batch_size=self.batch_size, shuffle=True)\n    def forward(self, x):\n        x = self.flatten(x)\n        logits = self.linear_relu_stack(x)\n        return logits\n    def traning_step(self, batch, batch_idx):\n        x, y = batch\n        output = self.forward(x)\n        criterion = nn.CrossEntropyLoss()\n        loss = criterion(output, y)\n        logs = {'loss': loss}\n        return {'loss':loss, 'log':logs}\n    def validation_step(self, batch, batch_idx):\n        x, y = batch\n        logits = self.forward(x)\n        criterion = nn.CrossEntropyLoss()\n        loss = criterion(logits, y)\n        a, y_hat = torch.max(logits, dim=1)\n        val_acc = accuracy_score(y_hat.cpu(), y.cpu())\n        val_acc = torch.tensor(val_acc)\n        return {'val_loss': loss, 'val_acc': val_acc}\n    \n    def validation_epoch_end(self, outputs):\n        avg_loss = torch.stack([x['val_loss'] for x in outputs]).mean()\n        avg_val_acc = torch.stack([x['val_acc'] for x in outputs]).mean()\n        tensorboard_logs = {'val_loss': avg_loss, 'avg_val_acc': avg_val_acc}\n        return {'avg_val_loss': avg_loss, 'progress_bar': tensorboard_logs}\n\nmodel = PytorchLightningModel(param1=768, param2=5)\ntrainer = pl.Trainer()\ntrainer.fit(model)\n")))}f.isMDXComponent=!0}}]);